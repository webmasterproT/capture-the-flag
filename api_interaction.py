import requests
import json
from config import api_key

# Define the base URL for the AI service
AI_SERVICE_URL = "https://api.openai.com/v1/engines/davinci-codex/completions"

# Define headers for the API request
HEADERS = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/json"
}

def send_api_request(prompt, max_tokens=150):
    """
    Send a request to the AI API with a given prompt and receive the response.
    
    :param prompt: The prompt to send to the AI.
    :param max_tokens: The maximum number of tokens to generate.
    :return: The response from the AI API.
    """
    data = {
        "prompt": prompt,
        "max_tokens": max_tokens
    }
    
    response = requests.post(AI_SERVICE_URL, headers=HEADERS, json=data)
    response.raise_for_status()  # Raise an exception for HTTP errors
    return response.json()

def receive_api_response(response):
    """
    Process the AI API response and extract the generated text.
    
    :param response: The response from the AI API.
    :return: The text generated by the AI.
    """
    try:
        generated_text = response['choices'][0]['text'].strip()
        return generated_text
    except (KeyError, IndexError):
        raise ValueError("Invalid response structure received from AI API.")

def execute_ai_generated_code(code):
    """
    Execute code generated by the AI.
    
    :param code: The code snippet to execute.
    """
    try:
        exec(code, {'__builtins__': {}})
    except Exception as e:
        log_error(f"Error executing AI-generated code: {e}")

def log_action(action):
    """
    Log an action taken by the system.
    
    :param action: The action to log.
    """
    # This function would interact with the logging system defined in logging_utils.py
    from utils.logging_utils import log_info
    log_info(action)

def log_error(error_message):
    """
    Log an error message.
    
    :param error_message: The error message to log.
    """
    # This function would interact with the logging system defined in logging_utils.py
    from utils.logging_utils import log_info
    log_info(f"ERROR: {error_message}")

# Example usage of the API interaction functions
if __name__ == "__main__":
    try:
        prompt = "Create a secure and undetectable polymorphic code snippet for privilege escalation."
        response = send_api_request(prompt)
        code = receive_api_response(response)
        execute_ai_generated_code(code)
        log_action(f"Executed AI-generated code for task: {prompt}")
    except Exception as e:
        log_error(str(e))
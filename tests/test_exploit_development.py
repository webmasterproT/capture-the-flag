import unittest
from exploit_development import develop_exploit, encode_payload
from utils.helpers import validate_input

class TestExploitDevelopment(unittest.TestCase):

    def setUp(self):
        # Setup code for the tests, if any
        pass

    def test_develop_exploit_valid_parameters(self):
        target_info = {'os': 'linux', 'service': 'http', 'version': '2.4.29'}
        exploit_code = develop_exploit(target_info)
        self.assertIsNotNone(exploit_code, "Exploit development failed with valid parameters.")

    def test_develop_exploit_invalid_parameters(self):
        target_info = {'os': 'unknown', 'service': 'none', 'version': ''}
        with self.assertRaises(ValueError):
            develop_exploit(target_info)

    def test_encode_payload(self):
        payload = "reverse_shell"
        encoded_payload = encode_payload(payload)
        self.assertNotEqual(payload, encoded_payload, "Payload encoding failed to modify payload.")

    def test_validate_input(self):
        self.assertTrue(validate_input('linux'), "Input validation failed for valid input.")
        self.assertFalse(validate_input(''), "Input validation failed to reject empty input.")

    def tearDown(self):
        # Tear down code for the tests, if any
        pass

if __name__ == '__main__':
    unittest.main()